# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zs2aLMKxkP5hhyDXetTqwas4oP8n7138
"""

!pip install torchvision
!pip install roboflow

from roboflow import Roboflow

rf = Roboflow(api_key="0NRdo3z9p8yZlgyeGEdN")
project = rf.workspace("bitecheck").project("bug-bites-craqq")
version = project.version(1)

# Folder Structure formatında veri setini indiriyoruz
dataset = version.download("folder")
dataset_path = dataset.location

import os

print("Train klasöründeki sınıflar:", os.listdir(os.path.join(dataset_path, "train")))

from torchvision.datasets import ImageFolder
from torchvision import transforms
from torch.utils.data import DataLoader

transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor()
])

train_dataset = ImageFolder(root=os.path.join(dataset_path, "train"), transform=transform)
valid_dataset = ImageFolder(root=os.path.join(dataset_path, "valid"), transform=transform)

train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
valid_loader = DataLoader(valid_dataset, batch_size=32)

class_names = train_dataset.classes
print("Sınıflar:", class_names)

import torch
import torch.nn as nn
import torchvision.models as models

device = "cuda" if torch.cuda.is_available() else "cpu"

model = models.resnet18(pretrained=True)
model.fc = nn.Linear(model.fc.in_features, len(class_names))
model = model.to(device)

import torch.optim as optim

criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=1e-4)

EPOCHS = 5

for epoch in range(EPOCHS):
    model.train()
    running_loss = 0.0
    correct = 0
    total = 0

    for images, labels in train_loader:
        images, labels = images.to(device), labels.to(device)

        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        running_loss += loss.item()
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

    accuracy = 100 * correct / total
    print(f"Epoch [{epoch+1}/{EPOCHS}] Loss: {running_loss:.4f} | Accuracy: {accuracy:.2f}%")

# Test setini yüklüyoruz
test_dataset = ImageFolder(root=os.path.join(dataset_path, "test"), transform=transform)
test_loader = DataLoader(test_dataset, batch_size=32)

# Doğruluk hesaplama
correct = 0
total = 0
model.eval()

with torch.no_grad():
    for images, labels in test_loader:
        images, labels = images.to(device), labels.to(device)
        outputs = model(images)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

print(f"Test Doğruluğu: {100 * correct / total:.2f}%")

torch.save(model, "bitecheck_model.pt")
print("Model başarıyla bitecheck_model.pt dosyasına kaydedildi.")

# Test veri setini yükle
test_dataset = ImageFolder(root=os.path.join(dataset_path, "test"), transform=transform)
test_loader = DataLoader(test_dataset, batch_size=32)

# Modeli test et
correct = 0
total = 0
model.eval()

with torch.no_grad():
    for images, labels in test_loader:
        images, labels = images.to(device), labels.to(device)
        outputs = model(images)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

print(f"Test Doğruluğu: {100 * correct / total:.2f}%")

from PIL import Image
import matplotlib.pyplot as plt

def predict_image(image_path):
    model.eval()

    # Görseli aç ve dönüştür
    image = Image.open(image_path).convert("RGB")
    image_tensor = transform(image).unsqueeze(0).to(device)

    # Tahmin yap
    with torch.no_grad():
        output = model(image_tensor)
        _, predicted = torch.max(output, 1)
        class_name = class_names[predicted.item()]

    # Görseli ve sonucu göster
    plt.imshow(image)
    plt.axis("off")
    plt.title(f"Tahmin: {class_name}")
    plt.show()

    return class_name

from google.colab import files

# Görseli yükle
uploaded = files.upload()

# Dosya adını al
file_name = list(uploaded.keys())[0]
print(f"Yüklenen dosya: {file_name}")

# Tahmin yap
tahmin = predict_image(file_name)
print(f"Tahmin sonucu: {tahmin}")